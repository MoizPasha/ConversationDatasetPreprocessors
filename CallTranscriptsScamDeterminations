{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7687155,"sourceType":"datasetVersion","datasetId":4470693}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd #import libraries","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T14:54:10.665126Z","iopub.execute_input":"2025-07-02T14:54:10.665593Z","iopub.status.idle":"2025-07-02T14:54:10.670001Z","shell.execute_reply.started":"2025-07-02T14:54:10.665565Z","shell.execute_reply":"2025-07-02T14:54:10.669205Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/call-transcripts-scam-determinations/BETTER30.csv') #load dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T14:54:18.402515Z","iopub.execute_input":"2025-07-02T14:54:18.402806Z","iopub.status.idle":"2025-07-02T14:54:18.429181Z","shell.execute_reply.started":"2025-07-02T14:54:18.402783Z","shell.execute_reply":"2025-07-02T14:54:18.428424Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df_unique = df.drop_duplicates(subset=['CONVERSATION_ID', 'CONVERSATION_STEP']) #The dataset had duplicates so removing them","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T15:24:55.559165Z","iopub.execute_input":"2025-07-02T15:24:55.559489Z","iopub.status.idle":"2025-07-02T15:24:55.567097Z","shell.execute_reply.started":"2025-07-02T15:24:55.559467Z","shell.execute_reply":"2025-07-02T15:24:55.566269Z"}},"outputs":[],"execution_count":90},{"cell_type":"code","source":"df = df_unique.sort_values(by=['CONVERSATION_ID', 'CONVERSATION_STEP']) #Sorting them","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T15:25:29.880159Z","iopub.execute_input":"2025-07-02T15:25:29.880480Z","iopub.status.idle":"2025-07-02T15:25:29.887276Z","shell.execute_reply.started":"2025-07-02T15:25:29.880456Z","shell.execute_reply":"2025-07-02T15:25:29.886379Z"}},"outputs":[],"execution_count":92},{"cell_type":"code","source":"df= df.groupby('CONVERSATION_ID')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T15:26:01.497298Z","iopub.execute_input":"2025-07-02T15:26:01.498446Z","iopub.status.idle":"2025-07-02T15:26:01.502595Z","shell.execute_reply.started":"2025-07-02T15:26:01.498409Z","shell.execute_reply":"2025-07-02T15:26:01.501875Z"}},"outputs":[],"execution_count":94},{"cell_type":"code","source":"import json\n\noutput_data = {}\nconv_id = 40000 # Custom Start number\n\nfor _, group in df:\n    messages = []\n    mID = 1\n    for idx, row in group.iterrows():\n        messages.append({\n            'from': 'AGENT' if ( mID%2 == 1 ) else 'CUSTOMER', \n            'message_id': mID,\n            'message': row['TEXT']\n        })\n        mID +=1\n    conv_id +=1\n    output_data[conv_id] = messages\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T15:32:26.041624Z","iopub.execute_input":"2025-07-02T15:32:26.041911Z","iopub.status.idle":"2025-07-02T15:32:26.093017Z","shell.execute_reply.started":"2025-07-02T15:32:26.041891Z","shell.execute_reply":"2025-07-02T15:32:26.092086Z"}},"outputs":[],"execution_count":100},{"cell_type":"code","source":"# Save to JSON file\n#with open('conversations.json', 'w') as f:\n#    json.dump(output_data, f, indent=2)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}